/*#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>

int to_see = 0;

void    *routine()
{
   int i = 0;
   while (i < 100000)
   {
        i++;
        to_see++;
   }
}

int main(void)
{
    pthread_t t1, t2;

    pthread_create(&t1, NULL, routine, NULL);
    pthread_create(&t2, NULL, routine, NULL);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    printf("Qual e o numero do to_see agora? %d\n", to_see);
}*/

Ao executarmos este codigo, o resultado que eu inicialmente esperaria, e talvez quem nao conheca threads esperaria, seria 200000.
Mas a verdade e que o resultado pode sim ser 200000 mas e muito raro acontecer.

O porque disso sao as race conditions.
A primeira thread vai ser executada e a segunda tambem vai, mas a segunda thread vai ser executada antes da primeira thread acabar as suas 100000 incrementacoes.

Se por exemplo fossem 100 iteracoes, muito provavelmente nao teriamos esse problema, pois as incrementacoes da primeira thread acabariam, antes da segunda thread comecar.